// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuizBuilder.Infrastructure.Data;

#nullable disable

namespace QuizBuilder.Infrastructure.Migrations
{
    [DbContext(typeof(QuizDbContext))]
    partial class QuizDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuizBuilder.Domain.Quiz.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("RanDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ran_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_quizzes");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_quizzes_created_by");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_quizzes_id");

                    b.ToTable("quizzes", (string)null);
                });

            modelBuilder.Entity("QuizBuilder.Domain.Quiz.Quiz", b =>
                {
                    b.OwnsOne("QuizBuilder.Domain.QuizAccessCode.QuizAccessCode", "AccessCode", b1 =>
                        {
                            b1.Property<Guid>("QuizId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("AccessCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("access_code");

                            b1.Property<string>("QrCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("qr_code");

                            b1.HasKey("QuizId")
                                .HasName("pk_quiz_access_code");

                            b1.ToTable("quiz_accessCode", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("QuizId")
                                .HasConstraintName("fk_quiz_access_code_quizzes_id");
                        });

                    b.Navigation("AccessCode")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
